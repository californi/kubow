apiVersion: v1
kind: ConfigMap
metadata:
  creationTimestamp: null
  name: tactics
data:
  tactics.s: |
    module kuberainbow.strategies;
    import model "VotingAppSystem:Acme" { VotingAppSystem as M, Kubernetes as K };
    import op "org.sa.rainbow.stitch.lib.*";

    define boolean cHiRespTime = M.resultS.latency > M.MAX_RESPTIME;
    define boolean canAddPods = M.resultD.maxReplicas > M.resultD.desiredReplicas;
    define boolean canRemovePods = M.resultD.minReplicas < M.resultD.desiredReplicas;

    tactic addReplicas(int count) {
      condition {
        cHiRespTime && canAddPods;
      }
      action {
        M.scaleUp(M.resultD, M.resultD.desiredReplicas + count);
      }
      effect {
        M.resultD.maxReplicas >= M.resultD.desiredReplicas;
      }
    }

    tactic removeReplicas(int count) {
      condition {
        !cHiRespTime && canRemovePods;
      }
      action {
        M.scaleDown(M.resultD, M.resultD.desiredReplicas - count);
      }
      effect {
        M.resultD.minReplicas <= M.resultD.desiredReplicas;
      }
    }